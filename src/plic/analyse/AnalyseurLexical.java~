/* The following code was generated by JFlex 1.6.1 */

package plic.analyse ;

import java_cup.runtime.*;
import plic.exceptions.AnalyseLexicaleException;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalyseurLexical.jflex</tt>
 */
public class AnalyseurLexical implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\13\1\42\1\13\1\13\22\0\1\13\1\21\1\12"+
    "\5\0\1\30\1\31\1\16\1\14\1\32\1\15\1\0\1\17\12\2"+
    "\1\0\1\33\1\22\1\20\1\23\2\0\32\1\4\0\1\1\1\0"+
    "\1\5\1\40\1\34\1\1\1\24\1\7\2\1\1\6\2\1\1\35"+
    "\1\1\1\27\1\26\1\37\1\41\1\4\1\36\1\25\1\10\1\3"+
    "\1\1\1\11\2\1\12\0\1\42\u1fa2\0\1\42\1\42\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\2\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\1\13\3\2"+
    "\1\14\1\15\1\16\1\17\5\2\1\0\1\20\1\21"+
    "\1\22\2\2\1\23\7\2\1\0\1\24\2\2\1\25"+
    "\4\2\1\26\1\0\6\2\1\0\6\2\1\0\1\27"+
    "\1\30\1\31\1\32\2\2\1\0\2\2\1\0\1\33"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\64\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\43"+
    "\0\43\0\43\0\43\0\43\0\365\0\u0118\0\43\0\43"+
    "\0\u013b\0\u015e\0\u0181\0\43\0\43\0\43\0\43\0\u01a4"+
    "\0\u01c7\0\u01ea\0\u020d\0\u0230\0\u0253\0\43\0\43\0\u01ea"+
    "\0\u0276\0\u0299\0\u01ea\0\u02bc\0\u02df\0\u0302\0\u0325\0\u0348"+
    "\0\u036b\0\u038e\0\u03b1\0\43\0\u03d4\0\u03f7\0\u0348\0\u041a"+
    "\0\u043d\0\u0460\0\u0483\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f"+
    "\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627"+
    "\0\u064a\0\u066d\0\u0690\0\u066d\0\u066d\0\u066d\0\u066d\0\u06b3"+
    "\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u0762\0\u073f\0\u0785\0\u07a8"+
    "\0\u07cb\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0"+
    "\0\u08e3\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8"+
    "\0\u09fb\0\u0a1e\0\u0a41\0\u0a64\0\u0a87\0\u0aaa\0\u0acd\0\u0af0"+
    "\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08"+
    "\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd\0\u0d20"+
    "\0\u0d43\0\u0d66\0\43\0\u0d89\0\u0dac\0\u0dcf\0\u0df2\0\u0e15"+
    "\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d"+
    "\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff\0\u1022\0\u1045"+
    "\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4\0\u1117\0\u113a\0\u115d"+
    "\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\u120c\0\u122f\0\u1252\0\u1275"+
    "\0\u1298\0\u12bb\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d"+
    "\0\u13b0\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\3\3\1\6\2\3\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\3\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\2\3\1\31\2\3\45\0\11\32\12\0"+
    "\4\32\4\0\6\32\3\0\1\4\41\0\3\32\1\33"+
    "\5\32\12\0\4\32\4\0\6\32\2\0\4\32\1\34"+
    "\4\32\12\0\4\32\4\0\6\32\2\0\1\35\1\0"+
    "\7\35\12\0\4\35\4\0\6\35\21\0\1\36\42\0"+
    "\1\37\23\0\11\32\12\0\1\32\1\40\1\32\1\41"+
    "\4\0\1\42\5\32\2\0\7\32\1\43\1\32\12\0"+
    "\4\32\4\0\6\32\2\0\11\32\12\0\2\32\1\44"+
    "\1\32\4\0\6\32\2\0\11\32\12\0\4\32\4\0"+
    "\1\32\1\45\4\32\2\0\3\32\1\46\3\32\1\47"+
    "\1\32\12\0\4\32\4\0\6\32\2\0\11\50\12\0"+
    "\4\50\4\0\6\50\2\0\4\50\1\51\4\50\12\0"+
    "\4\50\4\0\6\50\2\0\7\50\1\52\1\50\12\0"+
    "\4\50\4\0\6\50\2\0\11\53\1\54\11\0\4\53"+
    "\4\0\6\53\2\0\11\50\12\0\1\50\1\55\2\50"+
    "\4\0\6\50\2\0\3\50\1\56\5\50\12\0\4\50"+
    "\4\0\6\50\2\0\11\50\12\0\3\50\1\57\4\0"+
    "\6\50\2\0\4\50\1\60\4\50\12\0\4\50\4\0"+
    "\6\50\2\0\5\50\1\61\3\50\12\0\4\50\4\0"+
    "\6\50\2\0\11\50\12\0\4\50\4\0\4\50\1\62"+
    "\1\50\2\0\11\63\12\0\4\63\4\0\6\63\2\0"+
    "\5\63\1\64\3\63\12\0\4\63\4\0\6\63\2\0"+
    "\10\63\1\64\12\0\4\63\4\0\6\63\2\0\11\65"+
    "\1\54\11\0\4\65\4\0\6\65\2\0\5\63\1\66"+
    "\3\63\12\0\4\63\4\0\6\63\2\0\5\63\1\67"+
    "\3\63\12\0\4\63\4\0\6\63\2\0\11\63\12\0"+
    "\4\63\4\0\2\63\1\70\3\63\2\0\2\63\1\71"+
    "\6\63\12\0\4\63\4\0\6\63\2\0\11\63\12\0"+
    "\4\63\4\0\1\63\1\72\4\63\2\0\11\73\12\0"+
    "\4\73\4\0\6\73\2\0\11\74\1\54\11\0\4\74"+
    "\4\0\6\74\2\0\11\73\12\0\1\75\3\73\4\0"+
    "\6\73\2\0\3\73\1\76\5\73\12\0\4\73\4\0"+
    "\6\73\2\0\11\73\12\0\4\73\4\0\2\73\1\77"+
    "\3\73\2\0\11\73\12\0\1\100\3\73\4\0\6\73"+
    "\2\0\5\73\1\101\3\73\12\0\4\73\4\0\6\73"+
    "\2\0\11\102\12\0\4\102\4\0\6\102\2\0\11\103"+
    "\1\54\11\0\4\103\4\0\6\103\2\0\3\102\1\104"+
    "\5\102\12\0\4\102\4\0\6\102\2\0\11\102\12\0"+
    "\1\105\3\102\4\0\6\102\2\0\11\102\12\0\1\106"+
    "\3\102\4\0\6\102\2\0\11\102\12\0\1\107\3\102"+
    "\4\0\6\102\2\0\11\102\12\0\4\102\4\0\5\102"+
    "\1\110\2\0\11\111\12\0\4\111\4\0\6\111\2\0"+
    "\11\112\1\54\11\0\4\112\4\0\6\112\2\0\7\111"+
    "\1\113\1\111\12\0\4\111\4\0\6\111\2\0\11\114"+
    "\12\0\4\114\4\0\6\114\2\0\11\115\1\54\11\0"+
    "\4\115\4\0\6\115\2\0\11\114\12\0\1\116\3\114"+
    "\4\0\6\114\2\0\11\117\12\0\4\117\4\0\6\117"+
    "\2\0\11\120\1\54\11\0\4\120\4\0\6\120\2\0"+
    "\11\121\12\0\4\121\4\0\6\121\2\0\11\122\1\54"+
    "\11\0\4\122\4\0\6\122\2\0\11\123\12\0\4\123"+
    "\4\0\6\123\2\0\11\124\1\54\11\0\4\124\4\0"+
    "\6\124\2\0\11\125\12\0\4\125\4\0\6\125\2\0"+
    "\11\126\1\54\11\0\4\126\4\0\6\126\2\0\11\127"+
    "\12\0\4\127\4\0\6\127\2\0\11\130\1\54\11\0"+
    "\4\130\4\0\6\130\2\0\11\131\12\0\4\131\4\0"+
    "\6\131\2\0\11\132\1\54\11\0\4\132\4\0\6\132"+
    "\2\0\11\133\12\0\4\133\4\0\6\133\2\0\11\134"+
    "\1\54\11\0\4\134\4\0\6\134\2\0\11\135\12\0"+
    "\4\135\4\0\6\135\2\0\11\136\1\54\11\0\4\136"+
    "\4\0\6\136\2\0\11\137\12\0\4\137\4\0\6\137"+
    "\2\0\11\140\1\54\11\0\4\140\4\0\6\140\2\0"+
    "\11\141\12\0\4\141\4\0\6\141\2\0\11\142\1\54"+
    "\11\0\4\142\4\0\6\142\2\0\11\143\12\0\4\143"+
    "\4\0\6\143\2\0\11\144\1\54\11\0\4\144\4\0"+
    "\6\144\2\0\11\145\12\0\4\145\4\0\6\145\2\0"+
    "\11\146\1\54\11\0\4\146\4\0\6\146\2\0\11\147"+
    "\12\0\4\147\4\0\6\147\2\0\11\150\1\54\11\0"+
    "\4\150\4\0\6\150\2\0\11\151\12\0\4\151\4\0"+
    "\6\151\2\0\11\152\1\54\11\0\4\152\4\0\6\152"+
    "\2\0\11\153\12\0\4\153\4\0\6\153\2\0\11\154"+
    "\1\54\11\0\4\154\4\0\6\154\2\0\11\155\12\0"+
    "\4\155\4\0\6\155\2\0\11\156\1\54\11\0\4\156"+
    "\4\0\6\156\2\0\11\157\12\0\4\157\4\0\6\157"+
    "\2\0\11\160\1\54\11\0\4\160\4\0\6\160\2\0"+
    "\11\161\12\0\4\161\4\0\6\161\2\0\11\162\1\54"+
    "\11\0\4\162\4\0\6\162\2\0\11\163\12\0\4\163"+
    "\4\0\6\163\2\0\11\164\1\54\11\0\4\164\4\0"+
    "\6\164\2\0\11\165\12\0\4\165\4\0\6\165\2\0"+
    "\11\166\1\54\11\0\4\166\4\0\6\166\2\0\11\167"+
    "\12\0\4\167\4\0\6\167\2\0\11\170\1\54\11\0"+
    "\4\170\4\0\6\170\2\0\11\171\12\0\4\171\4\0"+
    "\6\171\2\0\11\172\1\54\11\0\4\172\4\0\6\172"+
    "\2\0\11\173\12\0\4\173\4\0\6\173\2\0\11\174"+
    "\1\54\11\0\4\174\4\0\6\174\2\0\11\175\1\54"+
    "\11\0\4\175\4\0\6\175\2\0\11\176\1\54\11\0"+
    "\4\176\4\0\6\176\2\0\11\177\1\54\11\0\4\177"+
    "\4\0\6\177\2\0\11\200\1\54\11\0\4\200\4\0"+
    "\6\200\2\0\11\201\1\54\11\0\4\201\4\0\6\201"+
    "\2\0\11\202\1\54\11\0\4\202\4\0\6\202\2\0"+
    "\11\203\1\54\11\0\4\203\4\0\6\203\2\0\11\204"+
    "\1\54\11\0\4\204\4\0\6\204\2\0\11\205\1\54"+
    "\11\0\4\205\4\0\6\205\2\0\11\206\1\54\11\0"+
    "\4\206\4\0\6\206\2\0\11\207\1\54\11\0\4\207"+
    "\4\0\6\207\2\0\11\210\1\54\11\0\4\210\4\0"+
    "\6\210\2\0\11\211\1\54\11\0\4\211\4\0\6\211"+
    "\2\0\11\212\1\54\11\0\4\212\4\0\6\212\2\0"+
    "\11\213\1\54\11\0\4\213\4\0\6\213\2\0\11\214"+
    "\1\54\11\0\4\214\4\0\6\214\2\0\11\215\1\54"+
    "\11\0\4\215\4\0\6\215\2\0\11\216\1\54\11\0"+
    "\4\216\4\0\6\216\2\0\11\217\1\54\11\0\4\217"+
    "\4\0\6\217\2\0\11\220\1\54\11\0\4\220\4\0"+
    "\6\220\2\0\11\221\1\54\11\0\4\221\4\0\6\221"+
    "\2\0\11\222\1\54\11\0\4\222\4\0\6\222\2\0"+
    "\11\223\1\54\11\0\4\223\4\0\6\223\2\0\11\224"+
    "\1\54\11\0\4\224\4\0\6\224\2\0\11\225\1\54"+
    "\11\0\4\225\4\0\6\225\2\0\11\226\1\54\11\0"+
    "\4\226\4\0\6\226\2\0\11\227\1\54\11\0\4\227"+
    "\4\0\6\227\2\0\11\230\1\54\11\0\4\230\4\0"+
    "\6\230\2\0\11\231\1\54\11\0\4\231\4\0\6\231"+
    "\2\0\11\232\1\54\11\0\4\232\4\0\6\232\2\0"+
    "\11\233\1\54\11\0\4\233\4\0\6\233\2\0\11\234"+
    "\1\54\11\0\4\234\4\0\6\234\2\0\11\235\1\54"+
    "\11\0\4\235\4\0\6\235\2\0\11\236\1\54\11\0"+
    "\4\236\4\0\6\236\2\0\11\237\1\54\11\0\4\237"+
    "\4\0\6\237\2\0\11\240\1\54\11\0\4\240\4\0"+
    "\6\240\2\0\11\241\1\54\11\0\4\241\4\0\6\241"+
    "\2\0\11\242\1\54\11\0\4\242\4\0\6\242\2\0"+
    "\11\243\1\54\11\0\4\243\4\0\6\243\2\0\11\244"+
    "\1\54\11\0\4\244\4\0\6\244\2\0\11\245\1\54"+
    "\11\0\4\245\4\0\6\245\2\0\11\246\1\54\11\0"+
    "\4\246\4\0\6\246\2\0\11\247\1\54\11\0\4\247"+
    "\4\0\6\247\2\0\11\250\1\54\11\0\4\250\4\0"+
    "\6\250\2\0\11\251\1\54\11\0\4\251\4\0\6\251"+
    "\2\0\11\252\1\54\11\0\4\252\4\0\6\252\2\0"+
    "\11\253\1\54\11\0\4\253\4\0\6\253\2\0\11\254"+
    "\1\54\11\0\4\254\4\0\6\254\2\0\11\255\1\54"+
    "\11\0\4\255\4\0\6\255\2\0\11\256\1\54\11\0"+
    "\4\256\4\0\6\256\2\0\11\257\1\54\11\0\4\257"+
    "\4\0\6\257\13\0\1\54\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5285];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\5\11\2\1\2\11\3\1\4\11"+
    "\5\1\1\0\2\11\13\1\1\0\1\11\10\1\1\0"+
    "\6\1\1\0\6\1\1\0\6\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\11\64\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private Symbol symbol(int type) {
	return new Symbol(type, yyline, yycolumn) ;
  }

  private Symbol symbol(int type, Object value) {
	return new Symbol(type, yyline, yycolumn, value) ;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalyseurLexical(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {         return symbol(CodesLexicaux.EOF) ;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new AnalyseLexicaleException(yyline, yycolumn, yytext()) ;
            }
          case 28: break;
          case 2: 
            { return symbol(CodesLexicaux.IDF, yytext());
            }
          case 29: break;
          case 3: 
            { return symbol(CodesLexicaux.CONSTANTEINT, yytext());
            }
          case 30: break;
          case 4: 
            { 
            }
          case 31: break;
          case 5: 
            { return symbol(CodesLexicaux.PLUS);
            }
          case 32: break;
          case 6: 
            { return symbol(CodesLexicaux.MOINS);
            }
          case 33: break;
          case 7: 
            { return symbol(CodesLexicaux.MULT);
            }
          case 34: break;
          case 8: 
            { return symbol(CodesLexicaux.DIV);
            }
          case 35: break;
          case 9: 
            { return symbol(CodesLexicaux.EGAL);
            }
          case 36: break;
          case 10: 
            { return symbol(CodesLexicaux.INF);
            }
          case 37: break;
          case 11: 
            { return symbol(CodesLexicaux.SUP);
            }
          case 38: break;
          case 12: 
            { return symbol(CodesLexicaux.PAROUV);
            }
          case 39: break;
          case 13: 
            { return symbol(CodesLexicaux.PARFER);
            }
          case 40: break;
          case 14: 
            { return symbol(CodesLexicaux.VIRGULE);
            }
          case 41: break;
          case 15: 
            { return symbol(CodesLexicaux.POINTVIRGULE);
            }
          case 42: break;
          case 16: 
            { return symbol(CodesLexicaux.EGALEGAL);
            }
          case 43: break;
          case 17: 
            { return symbol(CodesLexicaux.DIFF);
            }
          case 44: break;
          case 18: 
            { return symbol(CodesLexicaux.ET);
            }
          case 45: break;
          case 19: 
            { return symbol(CodesLexicaux.OU);
            }
          case 46: break;
          case 20: 
            { return symbol(CodesLexicaux.CONSTANTECHAINE, yytext());
            }
          case 47: break;
          case 21: 
            { return symbol(CodesLexicaux.NON);
            }
          case 48: break;
          case 22: 
            { return symbol(CodesLexicaux.CONSTANTEBOOL, yytext());
            }
          case 49: break;
          case 23: 
            { return symbol(CodesLexicaux.ENTIER);
            }
          case 50: break;
          case 24: 
            { return symbol(CodesLexicaux.INSTECRIRE);
            }
          case 51: break;
          case 25: 
            { return symbol(CodesLexicaux.CLASSE);
            }
          case 52: break;
          case 26: 
            { return symbol(CodesLexicaux.PRIVEE);
            }
          case 53: break;
          case 27: 
            { return symbol(CodesLexicaux.PUBLIQUE);
            }
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
