
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 25 18:09:49 CEST 2017
//----------------------------------------------------

package plic.analyse;

import java.util.*;
import plic.arbre.*;
import plic.declarations.*;
import plic.exceptions.AnalyseSyntaxiqueException;
import plic.arbre.expression.*;
import plic.tds.*;
import plic.tds.Symbol;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 25 18:09:49 CEST 2017
  */
public class AnalyseurSyntaxique extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalyseurSyntaxique() {super();}

  /** Constructor which sets the default scanner. */
  public AnalyseurSyntaxique(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalyseurSyntaxique(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\024" +
    "\004\000\002\024\003\000\002\005\006\000\002\005\005" +
    "\000\002\020\004\000\002\020\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\006\006\000\002" +
    "\015\005\000\002\015\003\000\002\014\003\000\002\011" +
    "\003\000\002\011\003\000\002\021\003\000\002\021\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\025\010\000\002\026\011\000\002\017\004\000\002" +
    "\017\003\000\002\017\004\000\002\017\003\000\002\022" +
    "\007\000\002\022\011\000\002\023\007\000\002\023\015" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\013\003\000\002\016\005\000\002\016\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\004\000\002\007\005\000" +
    "\002\007\005\000\002\007\004\000\002\007\003\000\002" +
    "\007\005\000\002\007\003\000\002\010\003\000\002\010" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\044\006\001\002\000\006\002\ufffe\044" +
    "\ufffe\001\002\000\004\002\170\001\002\000\004\052\012" +
    "\001\002\000\006\002\000\044\006\001\002\000\006\002" +
    "\uffff\044\uffff\001\002\000\026\021\031\025\024\030\034" +
    "\036\023\041\030\044\006\045\036\046\037\047\032\052" +
    "\012\001\002\000\070\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\021\ufff3\023\ufff3\025\ufff3\027\ufff3\030\ufff3" +
    "\036\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\051\ufff3\052\ufff3\001\002\000\010\004\117" +
    "\005\120\051\163\001\002\000\026\021\031\025\024\030" +
    "\034\036\023\041\030\044\006\045\162\046\037\047\032" +
    "\052\012\001\002\000\004\042\161\001\002\000\040\021" +
    "\ufff8\022\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8\032\ufff8" +
    "\036\ufff8\040\ufff8\041\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\052\ufff8\001\002\000\006\050\152\052\012\001\002" +
    "\000\040\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\030" +
    "\ufff9\032\ufff9\036\ufff9\040\ufff9\041\ufff9\044\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\052\ufff9\001\002\000\040\021\uffe8\022" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\032\uffe8\036\uffe8" +
    "\040\uffe8\041\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\052" +
    "\uffe8\001\002\000\040\021\uffe6\022\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\030\uffe6\032\uffe6\036\uffe6\040\uffe6\041\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\052\uffe6\001\002\000\004" +
    "\052\012\001\002\000\016\005\055\010\052\020\046\033" +
    "\053\034\050\052\012\001\002\000\040\021\uffec\022\uffec" +
    "\024\uffec\025\uffec\026\uffec\030\uffec\032\uffec\036\uffec\040" +
    "\uffec\041\uffec\044\uffec\045\uffec\046\uffec\047\uffec\052\uffec" +
    "\001\002\000\040\021\uffed\022\uffed\024\uffed\025\uffed\026" +
    "\uffed\030\uffed\032\uffed\036\uffed\040\uffed\041\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\052\uffed\001\002\000\040\021" +
    "\uffee\022\uffee\024\uffee\025\uffee\026\uffee\030\uffee\032\uffee" +
    "\036\uffee\040\uffee\041\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\052\uffee\001\002\000\020\005\055\010\052\020\046" +
    "\033\053\034\050\052\012\053\133\001\002\000\016\005" +
    "\055\010\052\020\046\033\053\034\050\052\012\001\002" +
    "\000\006\050\ufff1\052\ufff1\001\002\000\040\021\ufffa\022" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa\032\ufffa\036\ufffa" +
    "\040\ufffa\041\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\052" +
    "\ufffa\001\002\000\004\010\042\001\002\000\040\021\ufff7" +
    "\022\ufff7\024\ufff7\025\ufff7\026\ufff7\030\ufff7\032\ufff7\036" +
    "\ufff7\040\ufff7\041\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\052\ufff7\001\002\000\042\002\ufffc\021\ufffc\022\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\030\ufffc\032\ufffc\036\ufffc\040\ufffc" +
    "\041\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\052\ufffc\001" +
    "\002\000\006\050\ufff2\052\ufff2\001\002\000\004\042\041" +
    "\001\002\000\040\021\uffe7\022\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\030\uffe7\032\uffe7\036\uffe7\040\uffe7\041\uffe7\044\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\052\uffe7\001\002\000\004\052" +
    "\012\001\002\000\010\004\117\005\120\051\116\001\002" +
    "\000\004\042\045\001\002\000\016\005\055\010\052\020" +
    "\046\033\053\034\050\052\012\001\002\000\016\005\055" +
    "\010\052\020\046\033\053\034\050\052\012\001\002\000" +
    "\036\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\023\uffde\027" +
    "\uffde\042\uffde\001\002\000\036\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\023\uffcb\027\uffcb\042\uffcb\001\002\000\036" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\023\uffcf\027\uffcf" +
    "\042\uffcf\001\002\000\016\005\055\010\052\020\046\033" +
    "\053\034\050\052\012\001\002\000\036\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\023\uffcc\027\uffcc\042\uffcc\001\002" +
    "\000\030\004\062\005\067\006\060\007\063\012\070\013" +
    "\064\014\071\015\065\016\061\017\066\042\104\001\002" +
    "\000\016\005\055\010\052\020\046\033\053\034\050\052" +
    "\012\001\002\000\036\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\023\uffcd\027\uffcd\042\uffcd\001\002\000\036\004\uffd3" +
    "\005\uffd3\006\060\007\063\011\uffd3\012\070\013\064\014" +
    "\071\015\065\016\061\017\066\023\uffd3\027\uffd3\042\uffd3" +
    "\001\002\000\016\005\055\010\052\020\046\033\053\034" +
    "\050\052\012\001\002\000\016\005\055\010\052\020\046" +
    "\033\053\034\050\052\012\001\002\000\016\005\055\010" +
    "\052\020\046\033\053\034\050\052\012\001\002\000\016" +
    "\005\055\010\052\020\046\033\053\034\050\052\012\001" +
    "\002\000\016\005\055\010\052\020\046\033\053\034\050" +
    "\052\012\001\002\000\016\005\055\010\052\020\046\033" +
    "\053\034\050\052\012\001\002\000\016\005\055\010\052" +
    "\020\046\033\053\034\050\052\012\001\002\000\016\005" +
    "\055\010\052\020\046\033\053\034\050\052\012\001\002" +
    "\000\016\005\055\010\052\020\046\033\053\034\050\052" +
    "\012\001\002\000\016\005\055\010\052\020\046\033\053" +
    "\034\050\052\012\001\002\000\036\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\011\uffd5\012\070\013\064\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\023\uffd5\027\uffd5\042\uffd5\001\002\000" +
    "\036\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\023\uffd6\027" +
    "\uffd6\042\uffd6\001\002\000\036\004\uffda\005\uffda\006\060" +
    "\007\063\011\uffda\012\070\013\064\014\071\015\065\016" +
    "\061\017\066\023\uffda\027\uffda\042\uffda\001\002\000\036" +
    "\004\uffd1\005\uffd1\006\060\007\063\011\uffd1\012\070\013" +
    "\064\014\071\015\065\016\061\017\uffd1\023\uffd1\027\uffd1" +
    "\042\uffd1\001\002\000\036\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\070\013\064\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\023\uffd4\027\uffd4\042\uffd4\001\002\000\036\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\023\uffd7\027\uffd7\042" +
    "\uffd7\001\002\000\036\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\011\uffd8\012\070\013\064\014\071\015\065\016\061\017" +
    "\uffd8\023\uffd8\027\uffd8\042\uffd8\001\002\000\036\004\uffdb" +
    "\005\uffdb\006\060\007\063\011\uffdb\012\070\013\064\014" +
    "\071\015\065\016\061\017\066\023\uffdb\027\uffdb\042\uffdb" +
    "\001\002\000\036\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011" +
    "\uffd2\012\070\013\064\014\071\015\065\016\uffd2\017\uffd2" +
    "\023\uffd2\027\uffd2\042\uffd2\001\002\000\036\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\011\uffd9\012\070\013\064\014\071" +
    "\015\065\016\061\017\uffd9\023\uffd9\027\uffd9\042\uffd9\001" +
    "\002\000\004\052\012\001\002\000\004\011\106\001\002" +
    "\000\004\031\107\001\002\000\024\021\031\025\024\030" +
    "\034\036\023\041\030\044\006\046\037\047\032\052\012" +
    "\001\002\000\026\021\031\025\024\030\034\032\112\036" +
    "\023\041\030\044\006\046\037\047\032\052\012\001\002" +
    "\000\040\021\ufffb\022\ufffb\024\ufffb\025\ufffb\026\ufffb\030" +
    "\ufffb\032\ufffb\036\ufffb\040\ufffb\041\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\047\ufffb\052\ufffb\001\002\000\040\021\uffe2\022" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\032\uffe2\036\uffe2" +
    "\040\uffe2\041\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\052" +
    "\uffe2\001\002\000\030\004\062\005\067\006\060\007\063" +
    "\011\114\012\070\013\064\014\071\015\065\016\061\017" +
    "\066\001\002\000\036\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\023\uffce\027\uffce\042\uffce\001\002\000\036\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\023\uffd0\027\uffd0\042\uffd0" +
    "\001\002\000\016\005\055\010\052\020\046\033\053\034" +
    "\050\052\012\001\002\000\004\004\122\001\002\000\004" +
    "\005\121\001\002\000\006\011\uffdf\042\uffdf\001\002\000" +
    "\006\011\uffe0\042\uffe0\001\002\000\032\004\062\005\067" +
    "\006\060\007\063\011\uffe1\012\070\013\064\014\071\015" +
    "\065\016\061\017\066\042\uffe1\001\002\000\030\004\062" +
    "\005\067\006\060\007\063\012\070\013\064\014\071\015" +
    "\065\016\061\017\066\023\125\001\002\000\024\021\031" +
    "\025\024\030\034\036\023\041\030\044\006\046\037\047" +
    "\032\052\012\001\002\000\030\021\031\022\130\024\127" +
    "\025\024\030\034\036\023\041\030\044\006\046\037\047" +
    "\032\052\012\001\002\000\040\021\uffe5\022\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\030\uffe5\032\uffe5\036\uffe5\040\uffe5\041" +
    "\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\052\uffe5\001\002" +
    "\000\024\021\031\025\024\030\034\036\023\041\030\044" +
    "\006\046\037\047\032\052\012\001\002\000\026\021\031" +
    "\024\132\025\024\030\034\036\023\041\030\044\006\046" +
    "\037\047\032\052\012\001\002\000\040\021\uffe4\022\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\030\uffe4\032\uffe4\036\uffe4\040" +
    "\uffe4\041\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\052\uffe4" +
    "\001\002\000\004\042\136\001\002\000\030\004\062\005" +
    "\067\006\060\007\063\012\070\013\064\014\071\015\065" +
    "\016\061\017\066\042\135\001\002\000\040\021\uffdd\022" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\032\uffdd\036\uffdd" +
    "\040\uffdd\041\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\052" +
    "\uffdd\001\002\000\040\021\uffdc\022\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\030\uffdc\032\uffdc\036\uffdc\040\uffdc\041\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\052\uffdc\001\002\000\030" +
    "\004\062\005\067\006\060\007\063\012\070\013\064\014" +
    "\071\015\065\016\061\017\066\027\140\001\002\000\024" +
    "\021\031\025\024\030\034\036\023\041\030\044\006\046" +
    "\037\047\032\052\012\001\002\000\026\021\031\025\024" +
    "\026\142\030\034\036\023\041\030\044\006\046\037\047" +
    "\032\052\012\001\002\000\040\021\uffe3\022\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\030\uffe3\032\uffe3\036\uffe3\040\uffe3\041" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\052\uffe3\001\002" +
    "\000\004\010\144\001\002\000\004\011\145\001\002\000" +
    "\004\037\146\001\002\000\024\021\031\025\024\030\034" +
    "\036\023\041\030\044\006\046\037\047\032\052\012\001" +
    "\002\000\026\021\031\025\024\030\034\036\023\040\150" +
    "\041\030\044\006\046\037\047\032\052\012\001\002\000" +
    "\040\021\uffea\022\uffea\024\uffea\025\uffea\026\uffea\030\uffea" +
    "\032\uffea\036\uffea\040\uffea\041\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\052\uffea\001\002\000\004\052\uffef\001\002" +
    "\000\004\052\ufff0\001\002\000\004\052\012\001\002\000" +
    "\006\042\ufff4\043\ufff4\001\002\000\006\042\156\043\157" +
    "\001\002\000\040\021\ufff6\022\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\030\ufff6\032\ufff6\036\ufff6\040\ufff6\041\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\052\ufff6\001\002\000\004\052" +
    "\012\001\002\000\006\042\ufff5\043\ufff5\001\002\000\040" +
    "\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\032" +
    "\uffe9\036\uffe9\040\uffe9\041\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\052\uffe9\001\002\000\042\002\ufffd\021\ufffd\022" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\030\ufffd\032\ufffd\036\ufffd" +
    "\040\ufffd\041\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\052" +
    "\ufffd\001\002\000\020\005\055\010\052\020\046\033\053" +
    "\034\050\035\164\052\012\001\002\000\004\052\012\001" +
    "\002\000\004\010\166\001\002\000\004\011\167\001\002" +
    "\000\004\042\uffeb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\010\002\004\005\003\024\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\010\001\001" +
    "\000\004\005\007\001\001\000\002\001\001\000\036\003" +
    "\032\004\015\005\034\006\017\011\016\012\014\014\012" +
    "\016\020\017\026\020\013\022\025\023\024\025\037\026" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\110\004\015\005\034\006\017\011\016\012\014\014" +
    "\012\016\020\017\026\022\025\023\024\025\037\026\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\150\021\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\142\001\001\000\012\007" +
    "\136\010\050\013\055\014\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\133\010" +
    "\050\013\055\014\046\001\001\000\012\007\123\010\050" +
    "\013\055\014\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\043\014\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\053\010\050\013\055\014\046\001" +
    "\001\000\012\007\114\010\050\013\055\014\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\112\010\050\013\055\014\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\056\010\050\013" +
    "\055\014\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\102\010\050\013\055\014\046\001\001\000" +
    "\012\007\101\010\050\013\055\014\046\001\001\000\012" +
    "\007\100\010\050\013\055\014\046\001\001\000\012\007" +
    "\077\010\050\013\055\014\046\001\001\000\012\007\076" +
    "\010\050\013\055\014\046\001\001\000\012\007\075\010" +
    "\050\013\055\014\046\001\001\000\012\007\074\010\050" +
    "\013\055\014\046\001\001\000\012\007\073\010\050\013" +
    "\055\014\046\001\001\000\012\007\072\010\050\013\055" +
    "\014\046\001\001\000\012\007\071\010\050\013\055\014" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\104\014\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\032\004\015" +
    "\005\034\006\017\011\016\012\014\014\012\016\020\017" +
    "\026\020\107\022\025\023\024\025\037\026\021\001\001" +
    "\000\034\003\110\004\015\005\034\006\017\011\016\012" +
    "\014\014\012\016\020\017\026\022\025\023\024\025\037" +
    "\026\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\122\010\050\013\055\014\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\032\004" +
    "\015\005\034\006\017\011\016\012\014\014\012\016\020" +
    "\017\026\020\125\022\025\023\024\025\037\026\021\001" +
    "\001\000\034\003\110\004\015\005\034\006\017\011\016" +
    "\012\014\014\012\016\020\017\026\022\025\023\024\025" +
    "\037\026\021\001\001\000\002\001\001\000\036\003\032" +
    "\004\015\005\034\006\017\011\016\012\014\014\012\016" +
    "\020\017\026\020\130\022\025\023\024\025\037\026\021" +
    "\001\001\000\034\003\110\004\015\005\034\006\017\011" +
    "\016\012\014\014\012\016\020\017\026\022\025\023\024" +
    "\025\037\026\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\032\004\015\005\034\006" +
    "\017\011\016\012\014\014\012\016\020\017\026\020\140" +
    "\022\025\023\024\025\037\026\021\001\001\000\034\003" +
    "\110\004\015\005\034\006\017\011\016\012\014\014\012" +
    "\016\020\017\026\022\025\023\024\025\037\026\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\032\004\015\005\034\006" +
    "\017\011\016\012\014\014\012\016\020\017\026\020\146" +
    "\022\025\023\024\025\037\026\021\001\001\000\034\003" +
    "\110\004\015\005\034\006\017\011\016\012\014\014\012" +
    "\016\020\017\026\022\025\023\024\025\037\026\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\153\015\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\122\010\050\013\055\014\046\001\001\000\004" +
    "\014\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalyseurSyntaxique$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalyseurSyntaxique$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalyseurSyntaxique$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;
        lesTerminaux.put(new Integer(CodesLexicaux.CLASSETERM), "classe") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ECRIRETERM), "ecrire") ;
        lesTerminaux.put(new Integer(CodesLexicaux.IDFTERM), "idf") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ENTIER), "entier") ;

        StringBuffer m = new StringBuffer() ;
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminee : " + s.sym) ;
            }
        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalyseurSyntaxique$actions {


             
  private final AnalyseurSyntaxique parser;

  /** Constructor */
  CUP$AnalyseurSyntaxique$actions(AnalyseurSyntaxique parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalyseurSyntaxique$do_action(
    int                        CUP$AnalyseurSyntaxique$act_num,
    java_cup.runtime.lr_parser CUP$AnalyseurSyntaxique$parser,
    java.util.Stack            CUP$AnalyseurSyntaxique$stack,
    int                        CUP$AnalyseurSyntaxique$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalyseurSyntaxique$result;

      /* select the action based on the action number */
      switch (CUP$AnalyseurSyntaxique$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CSTE ::= CONSTANTEBOOL 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new ConstanteBool(e, eleft+1) ; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CSTE",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CSTE ::= CONSTANTEINT 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new ConstanteEntiere(e, eleft+1) ; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CSTE",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPR ::= ACCESS 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		AccesVariable a = (AccesVariable)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPR ::= PAROUV EXPR PARFER 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		 RESULT = e ; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPR ::= CSTE 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = c ; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPR ::= NON EXPR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new NonLogique(e); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPR ::= EXPR OU EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new OuLogique(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPR ::= EXPR ET EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new EtLogique(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPR ::= MOINS EXPR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new MoinsUnaire(e); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPR ::= EXPR DIFF EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Different(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPR ::= EXPR EGALEGAL EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Egal(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPR ::= EXPR SUP EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Superieur(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPR ::= EXPR INF EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Inferieur(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPR ::= EXPR DIV EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Div(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPR ::= EXPR MULT EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Mult(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPR ::= EXPR MOINS EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Moins(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPR ::= EXPR PLUS EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Plus(g, d) ; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ECRIRE ::= ECRIRETERM CONSTANTECHAINE POINTVIRGULE 
            {
              Ecrire RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
            TDC.getInstance().ajouter(c);
            RESULT = new EcrireChaine(c, cleft+1);
      
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("ECRIRE",12, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ECRIRE ::= ECRIRETERM EXPR POINTVIRGULE 
            {
              Ecrire RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
            RESULT = new EcrireExpression(e, eleft+1);
      
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("ECRIRE",12, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ACCESS ::= IDF 
            {
              AccesVariable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Idf i = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
        RESULT = new AccesVariable(i, ileft+1);
      
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("ACCESS",9, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AFFECT ::= IDF MOINS MOINS 
            {
              Affectation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Idf i = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		
            RESULT = new Affectation(i, new Moins(new AccesVariable(i, ileft+1), new ConstanteEntiere("1", ileft+1)), ileft+1);
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("AFFECT",8, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AFFECT ::= IDF PLUS PLUS 
            {
              Affectation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Idf i = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		
            RESULT = new Affectation(i, new Plus(new AccesVariable(i, ileft+1), new ConstanteEntiere("1", ileft+1)), ileft+1);
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("AFFECT",8, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AFFECT ::= IDF EGAL EXPR 
            {
              Affectation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Idf i = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = new Affectation(i, e, ileft+1);
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("AFFECT",8, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BOUCLE ::= POUR PAROUV AFFECT POINTVIRGULE EXPR POINTVIRGULE AFFECT PARFER DEBPOUR DECLARATIONS FPOUR 
            {
              Boucle RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-8)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-8)).right;
		Affectation a1 = (Affectation)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-6)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).right;
		Affectation a2 = (Affectation)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDeDeclarations inst = (BlocDeDeclarations)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
					RESULT = new Pour(a2left+1,a1,e2, a2, inst);
				
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("BOUCLE",17, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-10)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BOUCLE ::= TANTQUE EXPR REPETER DECLARATIONS FTANT 
            {
              Boucle RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDeDeclarations i = (BlocDeDeclarations)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
					RESULT = new TantQue(eleft+1,e,i);
				
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("BOUCLE",17, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDITION ::= SI EXPR ALORS DECLARATIONS SINON DECLARATIONS FSI 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		BlocDeDeclarations si = (BlocDeDeclarations)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int sinonleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int sinonright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDeDeclarations sinon = (BlocDeDeclarations)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
                    RESULT = new Condition(eleft+1, e, si, sinon);
                
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDITION",16, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-6)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDITION ::= SI EXPR ALORS DECLARATIONS FSI 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDeDeclarations i = (BlocDeDeclarations)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
                    RESULT = new Condition(eleft+1, e, i);
                
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDITION",16, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCTION ::= FONCTION 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Fonction f = (Fonction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
                RESULT = f;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCTION ::= INSTANCIATION POINTVIRGULE 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		Instanciation i = (Instanciation)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
                RESULT = i;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION ::= ECRIRE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Ecrire e = (Ecrire)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
                RESULT = e;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= AFFECT POINTVIRGULE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		Affectation a = (Affectation)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
                RESULT = a;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FONCTION ::= FONC IDF PAROUV PARFER ACCOUV DECLARATIONS ACCFER 
            {
              Fonction RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).right;
		Idf nom = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDeDeclarations ds = (BlocDeDeclarations)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
                RESULT = new Fonction(nomleft+1, nom, ds);
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("FONCTION",20, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-6)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTANCIATION ::= IDF EGAL NOUVEAU IDF PAROUV PARFER 
            {
              Instanciation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).right;
		Idf var = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).value;
		int classeleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int classeright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Idf classe = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		
                RESULT = new Instanciation(varleft+1, var, classe);
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INSTANCIATION",19, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECL_CSTE ::= BOUCLE 
            {
              DeclarationConstante RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Boucle b = (Boucle)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            	RESULT = b;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECL_CSTE",2, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECL_CSTE ::= CONDITION 
            {
              DeclarationConstante RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
                RESULT = c;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECL_CSTE",2, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECL_CSTE ::= INSTRUCTION 
            {
              DeclarationConstante RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
                RESULT = i;
           
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECL_CSTE",2, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= IDF 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Idf i = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = i.getNom();
      
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= ENTIER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Symbol e = (Symbol)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = "entier";
      
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATUS ::= PRIVEE 
            {
              String RESULT =null;
		
            RESULT = "privee";
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("STATUS",7, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATUS ::= PUBLIQUE 
            {
              String RESULT =null;
		
            RESULT = "publique";
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("STATUS",7, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDF ::= IDFTERM 
            {
              Idf RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
        RESULT = new Idf(nom, nomleft+1);
    
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("IDF",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IDFS ::= IDF 
            {
              ArrayList<Idf> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Idf i = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
        ArrayList<Idf> idfs = new ArrayList<Idf>();
        idfs.add(i);
        RESULT = idfs;
      
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("IDFS",11, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDFS ::= IDFS VIRGULE IDF 
            {
              ArrayList<Idf> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		ArrayList<Idf> is = (ArrayList<Idf>)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Idf i = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
        is.add(i);
        RESULT = is;

      
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("IDFS",11, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECL_CHAMP ::= STATUS TYPE IDFS POINTVIRGULE 
            {
              Declaration RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		ArrayList<Idf> i = (ArrayList<Idf>)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
                    if(!TDS.getInstance().isFirstClass()){
                        //System.out.println("FirstClass");
                        TDS.getInstance().entreeBloc(); //rentre dans le bloc de la premiere classe
                        TDS.getInstance().setFirstClass(true);
                    }

                    for (Idf champ : i) {
                        TDS.getInstance().ajouter(new Entree(champ.getNom()), new Symbol(s, t));
                    }
               
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECL_CHAMP",4, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARATION ::= CLASSE 
            {
              Declaration RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Classe c = (Classe)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
                    RESULT = c;
                
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECLARATION",1, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= DECL_CSTE 
            {
              Declaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		DeclarationConstante d = (DeclarationConstante)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
                    RESULT = d;
                
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECLARATION",1, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= DECL_CHAMP 
            {
              Declaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		

                
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECLARATION",1, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATIONS ::= DECLARATION 
            {
              BlocDeDeclarations RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		

                BlocDeDeclarations ds = new BlocDeDeclarations(dleft+1);
                if (d != null) {
                    ds.ajouter(d);
                }

                RESULT = ds;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",14, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATIONS ::= DECLARATIONS DECLARATION 
            {
              BlocDeDeclarations RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDeDeclarations dec = (BlocDeDeclarations)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
                if (d != null) {
                    dec.ajouter(d);
                }

                RESULT = dec;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",14, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASSE ::= CLASSETERM IDF FIN 
            {
              Classe RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		Idf i = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
                Classe c = new Classe(i, null, ileft+1);
                TDS.getInstance().sortieBloc();
                //System.out.println("FIN CLASSE");
                RESULT = c;
           
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CLASSE",3, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASSE ::= CLASSETERM IDF DECLARATIONS FIN 
            {
              Classe RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Idf i = (Idf)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDeDeclarations ds = (BlocDeDeclarations)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
                Classe c = new Classe(i, ds, ileft+1);
                TDS.getInstance().sortieBloc();
                //System.out.println("FIN CLASSE");
                RESULT = c;
           
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CLASSE",3, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASSES ::= CLASSE 
            {
              BlocDeClasses RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Classe c = (Classe)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
                BlocDeClasses cs = new BlocDeClasses(cleft+1) ;
                TDS.getInstance().entreeBloc();
                cs.ajouter(c) ;
                RESULT = cs ;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CLASSES",18, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASSES ::= CLASSES CLASSE 
            {
              BlocDeClasses RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDeClasses cs = (BlocDeClasses)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Classe c = (Classe)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
                TDS.getInstance().entreeBloc();
                cs.ajouter(c);
                RESULT = cs;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CLASSES",18, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SYSTEME ::= CLASSES 
            {
              ArbreAbstrait RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		BlocDeClasses c = (BlocDeClasses)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
                //System.out.println("FIN SYSTEME - RESET id");
                TDS.getInstance().setId(1);
                RESULT = c;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("SYSTEME",0, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SYSTEME EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		ArbreAbstrait start_val = (ArbreAbstrait)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		RESULT = start_val;
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalyseurSyntaxique$parser.done_parsing();
          return CUP$AnalyseurSyntaxique$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

