/* The following code was generated by JFlex 1.6.1 */

package plic.analyse ;

import java_cup.runtime.*;
import plic.exceptions.AnalyseLexicaleException;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalyseurLexical.jflex</tt>
 */
public class AnalyseurLexical implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int commentaire = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\13\1\15\1\12\1\12\22\0\1\44\1\21\1\11"+
    "\5\0\1\32\1\33\1\16\1\24\1\43\1\25\1\0\1\14\12\1"+
    "\1\0\1\42\1\22\1\20\1\23\2\0\32\17\4\0\1\17\1\0"+
    "\1\4\1\40\1\34\1\45\1\26\1\6\2\17\1\5\2\17\1\35"+
    "\1\17\1\31\1\30\1\37\1\41\1\3\1\36\1\27\1\7\1\2"+
    "\1\17\1\10\2\17\1\46\1\0\1\47\7\0\1\15\u1fa2\0\1\15"+
    "\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\5\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\4\3\1\13\1\14"+
    "\3\3\1\15\1\16\1\3\1\17\1\20\1\1\12\3"+
    "\1\0\1\21\1\1\1\22\1\23\1\24\1\25\3\3"+
    "\1\26\2\3\1\27\4\3\1\30\5\3\1\31\2\3"+
    "\1\32\5\3\1\33\7\3\1\34\15\3\1\35\3\3"+
    "\1\36\1\37\1\3\1\40\2\3\1\0\2\3\1\41"+
    "\6\3\1\42\1\43\1\0\1\3\1\44\1\45\3\3"+
    "\1\46\1\3\1\0\1\47\1\3\1\50\1\3\1\51"+
    "\1\52\1\53\27\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\120\0\u01b8\0\u01e0\0\120\0\120"+
    "\0\120\0\120\0\u0208\0\u0230\0\u0258\0\u0280\0\120\0\120"+
    "\0\u02a8\0\u02d0\0\u02f8\0\120\0\120\0\u0320\0\120\0\120"+
    "\0\u0348\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460"+
    "\0\u0488\0\u04b0\0\u04d8\0\u0168\0\u0500\0\u0528\0\120\0\120"+
    "\0\120\0\u0370\0\u0550\0\u0578\0\u05a0\0\u0370\0\u05c8\0\u05f0"+
    "\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\120\0\u06e0\0\u0708"+
    "\0\u0730\0\u0758\0\u0780\0\u06e0\0\u07a8\0\u07d0\0\u06e0\0\u07f8"+
    "\0\u0820\0\u0848\0\u0870\0\u0898\0\u06e0\0\u08c0\0\u08e8\0\u0910"+
    "\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09b0\0\u09d8\0\u0a00\0\u0a28"+
    "\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68"+
    "\0\u0b90\0\u0bb8\0\u09b0\0\u0be0\0\u0c08\0\u0c30\0\u0c08\0\u0c08"+
    "\0\u0c58\0\u0c08\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0c08"+
    "\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0dc0\0\u0dc0"+
    "\0\u0e38\0\u0e60\0\u0dc0\0\u0dc0\0\u0e88\0\u0eb0\0\u0ed8\0\u0ed8"+
    "\0\u0f00\0\u0f28\0\u0ed8\0\u0f50\0\u0ed8\0\u0f78\0\u0f78\0\120"+
    "\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090"+
    "\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0"+
    "\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\2\10"+
    "\1\12\2\3\1\13\1\0\1\14\1\10\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\10\1\32\1\33\2\10\1\34"+
    "\1\35\1\3\1\36\1\37\1\40\12\3\1\0\2\3"+
    "\1\0\1\41\31\3\51\0\1\4\47\0\2\42\1\43"+
    "\5\42\6\0\1\42\6\0\4\42\2\0\6\42\3\0"+
    "\1\42\3\0\10\42\6\0\1\42\6\0\1\44\3\42"+
    "\2\0\6\42\3\0\1\42\3\0\10\42\6\0\1\42"+
    "\6\0\4\42\2\0\1\42\1\45\4\42\3\0\1\42"+
    "\3\0\10\42\6\0\1\42\6\0\4\42\2\0\6\42"+
    "\3\0\1\42\3\0\3\42\1\46\1\47\3\42\6\0"+
    "\1\42\6\0\1\42\1\50\1\51\1\42\2\0\2\42"+
    "\1\52\1\53\2\42\3\0\1\42\2\0\11\54\1\55"+
    "\36\54\14\0\1\56\1\0\1\57\51\0\1\60\47\0"+
    "\1\61\30\0\10\42\6\0\1\42\6\0\1\42\1\62"+
    "\1\42\1\63\2\0\1\64\5\42\3\0\1\42\3\0"+
    "\3\42\1\65\4\42\6\0\1\42\6\0\4\42\2\0"+
    "\6\42\3\0\1\42\3\0\6\42\1\66\1\42\6\0"+
    "\1\42\6\0\4\42\2\0\6\42\3\0\1\42\3\0"+
    "\10\42\6\0\1\42\6\0\2\42\1\67\1\42\2\0"+
    "\6\42\3\0\1\42\3\0\10\42\6\0\1\42\6\0"+
    "\4\42\2\0\1\42\1\70\4\42\3\0\1\42\3\0"+
    "\4\42\1\71\3\42\6\0\1\42\6\0\4\42\2\0"+
    "\6\42\3\0\1\42\3\0\2\42\1\72\3\42\1\73"+
    "\1\42\6\0\1\42\6\0\2\42\1\74\1\42\2\0"+
    "\6\42\3\0\1\42\3\0\10\42\6\0\1\42\6\0"+
    "\1\75\3\42\2\0\6\42\3\0\1\42\16\0\1\76"+
    "\34\0\10\77\6\0\1\77\6\0\4\77\2\0\6\77"+
    "\3\0\1\77\3\0\3\77\1\100\4\77\6\0\1\77"+
    "\6\0\4\77\2\0\6\77\3\0\1\77\3\0\10\77"+
    "\6\0\1\77\6\0\4\77\2\0\3\77\1\101\2\77"+
    "\3\0\1\77\3\0\10\77\6\0\1\77\6\0\2\77"+
    "\1\102\1\77\2\0\6\77\3\0\1\77\3\0\6\77"+
    "\1\103\1\77\6\0\1\77\6\0\4\77\2\0\6\77"+
    "\3\0\1\77\3\0\10\77\6\0\1\77\6\0\3\77"+
    "\1\104\2\0\6\77\3\0\1\77\3\0\3\77\1\105"+
    "\4\77\6\0\1\77\6\0\4\77\2\0\6\77\3\0"+
    "\1\77\3\0\10\77\6\0\1\77\6\0\3\77\1\106"+
    "\2\0\6\77\3\0\1\77\3\0\4\77\1\107\3\77"+
    "\6\0\1\77\6\0\4\77\2\0\6\77\3\0\1\77"+
    "\3\0\10\77\6\0\1\77\6\0\2\77\1\110\1\77"+
    "\2\0\6\77\3\0\1\77\13\0\1\54\36\0\12\56"+
    "\2\0\1\56\1\0\32\56\1\0\10\77\6\0\1\77"+
    "\6\0\1\77\1\111\2\77\2\0\6\77\3\0\1\77"+
    "\3\0\2\77\1\112\5\77\6\0\1\77\6\0\4\77"+
    "\2\0\6\77\3\0\1\77\3\0\10\77\6\0\1\77"+
    "\6\0\3\77\1\113\2\0\6\77\3\0\1\77\3\0"+
    "\6\77\1\114\1\77\6\0\1\77\6\0\3\77\1\115"+
    "\2\0\6\77\3\0\1\77\3\0\3\77\1\116\4\77"+
    "\6\0\1\77\6\0\4\77\2\0\6\77\3\0\1\77"+
    "\3\0\10\77\6\0\1\77\6\0\3\77\1\117\2\0"+
    "\6\77\3\0\1\77\3\0\4\77\1\120\3\77\6\0"+
    "\1\77\6\0\4\77\2\0\6\77\3\0\1\77\3\0"+
    "\10\77\6\0\1\77\6\0\4\77\2\0\4\77\1\121"+
    "\1\77\3\0\1\77\3\0\6\77\1\122\1\77\6\0"+
    "\1\77\6\0\4\77\2\0\6\77\3\0\1\77\3\0"+
    "\10\77\6\0\1\77\6\0\4\77\2\0\4\77\1\123"+
    "\1\77\3\0\1\77\3\0\10\124\6\0\1\124\6\0"+
    "\4\124\2\0\6\124\3\0\1\124\3\0\4\124\1\125"+
    "\3\124\6\0\1\124\6\0\4\124\2\0\6\124\3\0"+
    "\1\124\3\0\10\124\6\0\1\124\6\0\1\126\3\124"+
    "\2\0\6\124\3\0\1\124\3\0\2\124\1\127\5\124"+
    "\6\0\1\124\6\0\4\124\2\0\6\124\3\0\1\124"+
    "\3\0\7\124\1\125\6\0\1\124\6\0\4\124\2\0"+
    "\6\124\3\0\1\124\3\0\10\124\6\0\1\124\6\0"+
    "\3\124\1\130\2\0\6\124\3\0\1\124\3\0\10\124"+
    "\6\0\1\124\6\0\4\124\2\0\1\131\5\124\3\0"+
    "\1\124\3\0\6\124\1\132\1\124\6\0\1\124\6\0"+
    "\4\124\2\0\6\124\3\0\1\124\3\0\4\124\1\133"+
    "\3\124\6\0\1\124\6\0\4\124\2\0\6\124\3\0"+
    "\1\124\3\0\4\124\1\134\3\124\6\0\1\124\6\0"+
    "\4\124\2\0\6\124\3\0\1\124\3\0\10\124\6\0"+
    "\1\124\6\0\1\124\1\135\2\124\2\0\6\124\3\0"+
    "\1\124\3\0\1\124\1\136\6\124\6\0\1\124\6\0"+
    "\4\124\2\0\6\124\3\0\1\124\3\0\10\124\6\0"+
    "\1\124\6\0\4\124\2\0\2\124\1\137\3\124\3\0"+
    "\1\124\3\0\10\124\6\0\1\124\6\0\2\124\1\140"+
    "\1\124\2\0\6\124\3\0\1\124\3\0\1\124\1\141"+
    "\6\124\6\0\1\124\6\0\4\124\2\0\6\124\3\0"+
    "\1\124\3\0\10\124\6\0\1\124\6\0\4\124\2\0"+
    "\1\124\1\142\4\124\3\0\1\124\3\0\2\124\1\143"+
    "\5\124\6\0\1\124\6\0\4\124\2\0\6\124\3\0"+
    "\1\124\3\0\10\124\6\0\1\124\6\0\4\124\2\0"+
    "\3\124\1\144\2\124\3\0\1\124\3\0\10\145\6\0"+
    "\1\145\6\0\4\145\2\0\6\145\3\0\1\145\3\0"+
    "\10\145\6\0\1\145\6\0\1\145\1\146\2\145\2\0"+
    "\6\145\3\0\1\145\3\0\10\145\6\0\1\145\6\0"+
    "\4\145\2\0\2\145\1\147\3\145\3\0\1\145\3\0"+
    "\10\145\6\0\1\145\6\0\1\145\1\150\2\145\2\0"+
    "\6\145\3\0\1\145\3\0\10\145\6\0\1\145\6\0"+
    "\1\145\1\151\2\145\2\0\6\145\3\0\1\145\3\0"+
    "\2\145\1\152\5\145\6\0\1\145\6\0\4\145\2\0"+
    "\6\145\3\0\1\145\3\0\10\145\6\0\1\145\6\0"+
    "\1\153\3\145\2\0\6\145\3\0\1\145\3\0\2\145"+
    "\1\154\5\145\6\0\1\145\6\0\4\145\2\0\6\145"+
    "\3\0\1\145\3\0\10\145\6\0\1\145\6\0\4\145"+
    "\2\0\6\145\2\0\1\155\1\145\3\0\10\145\6\0"+
    "\1\145\6\0\1\156\3\145\2\0\6\145\3\0\1\145"+
    "\3\0\10\145\6\0\1\145\6\0\4\145\2\0\2\145"+
    "\1\157\3\145\3\0\1\145\3\0\10\145\6\0\1\145"+
    "\6\0\3\145\1\160\2\0\6\145\3\0\1\145\3\0"+
    "\10\145\6\0\1\145\6\0\1\161\3\145\2\0\6\145"+
    "\3\0\1\145\3\0\4\145\1\162\3\145\6\0\1\145"+
    "\6\0\4\145\2\0\6\145\3\0\1\145\3\0\10\145"+
    "\6\0\1\145\6\0\2\145\1\163\1\145\2\0\6\145"+
    "\3\0\1\145\3\0\10\164\6\0\1\164\6\0\4\164"+
    "\2\0\6\164\3\0\1\164\3\0\10\164\6\0\1\164"+
    "\6\0\1\165\3\164\2\0\6\164\3\0\1\164\3\0"+
    "\4\164\1\166\3\164\6\0\1\164\6\0\4\164\2\0"+
    "\6\164\3\0\1\164\3\0\2\164\1\167\5\164\6\0"+
    "\1\164\6\0\4\164\2\0\6\164\3\0\1\164\3\0"+
    "\10\164\6\0\1\164\6\0\1\170\3\164\2\0\6\164"+
    "\3\0\1\164\43\0\1\171\7\0\3\164\1\172\4\164"+
    "\6\0\1\164\6\0\4\164\2\0\6\164\3\0\1\164"+
    "\3\0\10\164\6\0\1\164\6\0\1\173\3\164\2\0"+
    "\6\164\3\0\1\164\3\0\10\164\6\0\1\164\6\0"+
    "\1\174\3\164\2\0\6\164\3\0\1\164\3\0\10\164"+
    "\6\0\1\164\6\0\4\164\2\0\5\164\1\175\3\0"+
    "\1\164\3\0\6\164\1\176\1\164\6\0\1\164\6\0"+
    "\4\164\2\0\6\164\3\0\1\164\3\0\10\177\6\0"+
    "\1\177\6\0\4\177\2\0\6\177\3\0\1\177\3\0"+
    "\2\177\1\200\5\177\6\0\1\177\6\0\4\177\2\0"+
    "\6\177\3\0\1\177\3\0\10\177\6\0\1\177\6\0"+
    "\2\177\1\201\1\177\2\0\6\177\3\0\1\177\11\0"+
    "\1\202\41\0\6\177\1\203\1\177\6\0\1\177\6\0"+
    "\4\177\2\0\6\177\3\0\1\177\3\0\6\177\1\204"+
    "\1\177\6\0\1\177\6\0\4\177\2\0\6\177\3\0"+
    "\1\177\3\0\2\177\1\205\5\177\6\0\1\177\6\0"+
    "\4\177\2\0\6\177\3\0\1\177\3\0\10\206\6\0"+
    "\1\206\6\0\4\206\2\0\6\206\3\0\1\206\3\0"+
    "\10\206\6\0\1\206\6\0\3\206\1\207\2\0\6\206"+
    "\3\0\1\206\30\0\1\210\22\0\10\206\6\0\1\206"+
    "\6\0\1\211\3\206\2\0\6\206\3\0\1\206\3\0"+
    "\10\212\6\0\1\212\6\0\4\212\2\0\6\212\3\0"+
    "\1\212\3\0\10\213\6\0\1\213\6\0\4\213\2\0"+
    "\6\213\3\0\1\213\3\0\10\214\6\0\1\214\6\0"+
    "\4\214\2\0\6\214\3\0\1\214\3\0\10\215\6\0"+
    "\1\215\6\0\4\215\2\0\6\215\3\0\1\215\3\0"+
    "\10\216\6\0\1\216\6\0\4\216\2\0\6\216\3\0"+
    "\1\216\3\0\10\217\6\0\1\217\6\0\4\217\2\0"+
    "\6\217\3\0\1\217\3\0\10\220\6\0\1\220\6\0"+
    "\4\220\2\0\6\220\3\0\1\220\3\0\10\221\6\0"+
    "\1\221\6\0\4\221\2\0\6\221\3\0\1\221\3\0"+
    "\10\222\6\0\1\222\6\0\4\222\2\0\6\222\3\0"+
    "\1\222\3\0\10\223\6\0\1\223\6\0\4\223\2\0"+
    "\6\223\3\0\1\223\3\0\10\224\6\0\1\224\6\0"+
    "\4\224\2\0\6\224\3\0\1\224\3\0\10\225\6\0"+
    "\1\225\6\0\4\225\2\0\6\225\3\0\1\225\3\0"+
    "\10\226\6\0\1\226\6\0\4\226\2\0\6\226\3\0"+
    "\1\226\3\0\10\227\6\0\1\227\6\0\4\227\2\0"+
    "\6\227\3\0\1\227\3\0\10\230\6\0\1\230\6\0"+
    "\4\230\2\0\6\230\3\0\1\230\3\0\10\231\6\0"+
    "\1\231\6\0\4\231\2\0\6\231\3\0\1\231\3\0"+
    "\10\232\6\0\1\232\6\0\4\232\2\0\6\232\3\0"+
    "\1\232\3\0\10\233\6\0\1\233\6\0\4\233\2\0"+
    "\6\233\3\0\1\233\3\0\10\234\6\0\1\234\6\0"+
    "\4\234\2\0\6\234\3\0\1\234\3\0\10\235\6\0"+
    "\1\235\6\0\4\235\2\0\6\235\3\0\1\235\3\0"+
    "\10\236\6\0\1\236\6\0\4\236\2\0\6\236\3\0"+
    "\1\236\3\0\10\237\6\0\1\237\6\0\4\237\2\0"+
    "\6\237\3\0\1\237\3\0\10\240\6\0\1\240\6\0"+
    "\4\240\2\0\6\240\3\0\1\240\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4880];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\10\1\1\11\2\1\4\11\4\1\2\11"+
    "\3\1\2\11\1\1\2\11\13\1\1\0\2\1\3\11"+
    "\14\1\1\11\56\1\1\0\13\1\1\0\10\1\1\0"+
    "\5\1\1\11\27\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private Symbol symbol(int type) {
	return new Symbol(type, yyline, yycolumn) ;
  }

  private Symbol symbol(int type, Object value) {
	return new Symbol(type, yyline, yycolumn, value) ;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalyseurLexical(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {         return symbol(CodesLexicaux.EOF) ;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 44: break;
          case 2: 
            { return symbol(CodesLexicaux.CONSTANTEINT, yytext());
            }
          case 45: break;
          case 3: 
            { return symbol(CodesLexicaux.IDFTERM, yytext()) ;
            }
          case 46: break;
          case 4: 
            { return symbol(CodesLexicaux.DIV);
            }
          case 47: break;
          case 5: 
            { return symbol(CodesLexicaux.MULT);
            }
          case 48: break;
          case 6: 
            { return symbol(CodesLexicaux.EGAL);
            }
          case 49: break;
          case 7: 
            { return symbol(CodesLexicaux.INF);
            }
          case 50: break;
          case 8: 
            { return symbol(CodesLexicaux.SUP);
            }
          case 51: break;
          case 9: 
            { return symbol(CodesLexicaux.PLUS);
            }
          case 52: break;
          case 10: 
            { return symbol(CodesLexicaux.MOINS);
            }
          case 53: break;
          case 11: 
            { return symbol(CodesLexicaux.PAROUV);
            }
          case 54: break;
          case 12: 
            { return symbol(CodesLexicaux.PARFER);
            }
          case 55: break;
          case 13: 
            { return symbol(CodesLexicaux.POINTVIRGULE);
            }
          case 56: break;
          case 14: 
            { return symbol(CodesLexicaux.VIRGULE);
            }
          case 57: break;
          case 15: 
            { return symbol(CodesLexicaux.ACCOUV );
            }
          case 58: break;
          case 16: 
            { return symbol(CodesLexicaux.ACCFER );
            }
          case 59: break;
          case 17: 
            { String s = yytext();
                            s = s.replace("\"\"", "\\\"");
                            return symbol(CodesLexicaux.CONSTANTECHAINE, s);
            }
          case 60: break;
          case 18: 
            { yybegin(commentaire);
            }
          case 61: break;
          case 19: 
            { return symbol(CodesLexicaux.EGALEGAL);
            }
          case 62: break;
          case 20: 
            { return symbol(CodesLexicaux.DIFF);
            }
          case 63: break;
          case 21: 
            { return symbol(CodesLexicaux.ET);
            }
          case 64: break;
          case 22: 
            { return symbol(CodesLexicaux.OU);
            }
          case 65: break;
          case 23: 
            { return symbol(CodesLexicaux.SI );
            }
          case 66: break;
          case 24: 
            { yybegin(YYINITIAL);
            }
          case 67: break;
          case 25: 
            { return symbol(CodesLexicaux.FIN );
            }
          case 68: break;
          case 26: 
            { return symbol(CodesLexicaux.FSI );
            }
          case 69: break;
          case 27: 
            { return symbol(CodesLexicaux.NON);
            }
          case 70: break;
          case 28: 
            { return symbol(CodesLexicaux.CONSTANTEBOOL, yytext());
            }
          case 71: break;
          case 29: 
            { return symbol(CodesLexicaux.POUR);
            }
          case 72: break;
          case 30: 
            { return symbol(CodesLexicaux.ALORS );
            }
          case 73: break;
          case 31: 
            { return symbol(CodesLexicaux.FTANT);
            }
          case 74: break;
          case 32: 
            { return symbol(CodesLexicaux.FPOUR);
            }
          case 75: break;
          case 33: 
            { return symbol(CodesLexicaux.SINON );
            }
          case 76: break;
          case 34: 
            { return symbol(CodesLexicaux.ENTIER);
            }
          case 77: break;
          case 35: 
            { return symbol(CodesLexicaux.ECRIRETERM);
            }
          case 78: break;
          case 36: 
            { return symbol(CodesLexicaux.CLASSETERM );
            }
          case 79: break;
          case 37: 
            { return symbol(CodesLexicaux.PRIVEE);
            }
          case 80: break;
          case 38: 
            { return symbol(CodesLexicaux.REPETER);
            }
          case 81: break;
          case 39: 
            { return symbol(CodesLexicaux.NOUVEAU );
            }
          case 82: break;
          case 40: 
            { return symbol(CodesLexicaux.DEBPOUR);
            }
          case 83: break;
          case 41: 
            { return symbol(CodesLexicaux.FONC );
            }
          case 84: break;
          case 42: 
            { return symbol(CodesLexicaux.TANTQUE);
            }
          case 85: break;
          case 43: 
            { return symbol(CodesLexicaux.PUBLIQUE);
            }
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
